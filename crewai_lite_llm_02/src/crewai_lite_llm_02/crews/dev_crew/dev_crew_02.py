from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from dotenv import load_dotenv

load_dotenv()

@CrewBase
class DevCrew:  
    """Development Crew"""

    # define the First agent
    @agent
    def junior_python_developer(self) -> Agent:
        print("inside junior_python_developer agent")
        return Agent(
            role="Junior Python Developer",
            goal="Write python code solution without type hinting and pydocs for the problem statement {problem_statement}",
            backstory="You have 3 years of experience in python development and you are a junior python developer. You know how to use flask , django and fastapi.",
        )
    
        # define the agents
    @agent
    def senior_python_developer(self) -> Agent:
        print("inside senior_python_developer agent")
        return Agent(
            role="Senior Python Developer",
            goal="review the python code generated by junior_python_developer for this problem {problem_statement} and make sure it is correct and efficient.  if it is not correct or efficient, make the necessary changes. apply type hinting to the code. apply pydocs to the code. write 3 pytest cases for the code and make sure they are correct.",
            backstory="You have 20 years of experience in python development and you are a senior python developer. Deep learning , generative AI , computer vision , natural language processing , and expert in flask , django and fastapi. You have good commands on crewai , langgraph and autogen."
        )
    

    # define the First task
    @task
    def write_python_code(self) -> Task:
        print("inside write_python_code task")
        return Task(
            description="You have to write python solution  with type hinting for the problem statement {problem_statement}.",
            expected_output="return the python code only and nothing else.",
            agent=self.junior_python_developer()
        )
    
    # define the Second task
    @task
    def review_python_code(self) -> Task:
        print("inside review_python_code task")
        return Task(
            description="""
            You have to review the python code generated by junior_python_developer for this problem {problem_statement} and make sure it is correct and efficient.
            optimize the code for better performance and readability.Apply python type hinting and pydocs to the code.
            Also write 3 pytest cases for the code .""",
            expected_output="return the review of the python code only and nothing else.",
            agent=self.senior_python_developer()
        )

    # define the crew
    @crew
    def crew(self) -> Crew:
        print("inside crew")
        return Crew(
            agents=self.agents,  # Automatically created by the @agent decorator
            tasks=self.tasks,  # Automatically created by the @task decorator
            verbose=True,
        )